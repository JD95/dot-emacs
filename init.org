* Custom Bindings Map

Inspired by [[http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs][this StackOverflow post]] I keep a =custom-bindings-map= that
holds all my custom bindings. This map can be activated by toggling a
simple =minor-mode= that does nothing more than activating the map. This
inhibits other =major-modes= to override these bindings. I keep this at
the end of the init-file to make sure that all functions are actually
defined.

#+BEGIN_SRC emacs-lisp
(defvar custom-bindings-map (make-keymap)
  "A keymap for custom bindings.")
#+END_SRC

Defined here to allow bindings throughout the rest of the config

* User Functions

This updates the compiled init.el file with any changes made to this file.

** Advice
#+begin_src emacs-lisp
(defun always-true (&rest _args) 1)

(defun mk-y-or-n-p-always-true (old &rest args)
    (progn
      (advice-add 'y-or-n-p :override #'always-true)
      (let ((result (apply old args)))
        (advice-remove 'y-or-n-p #'always-true)
        result)))
#+end_src

* Minor Modes

** hyrda

Allows for the creation of menus.

#+BEGIN_SRC emacs-lisp
(use-package hydra :ensure t)
(require 'hydra)
#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp :tangle (config-require 'use-magit)
(use-package magit :ensure t)
(define-key custom-bindings-map (kbd "C-c m") 'magit-status)
#+END_SRC
** projectile

Use a custom program for projectile's grep

#+BEGIN_SRC emacs-lisp
(setq find-program find-location)
#+END_SRC

Enable projectile mode everywhere.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t)
(use-package counsel-projectile
  :ensure t)

(require 'projectile)
(projectile-mode 1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(counsel-projectile-mode)
#+END_SRC
** yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (yas-global-mode 1)
)
#+end_src
** lsp


#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :hook ((haskell-mode . lsp) (dhall-mode .lsp))
  :commands lsp)
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)
(use-package flycheck
  :ensure t)
(setq
  lsp-ui-sideline-enable t
  lsp-fly-check-enable t)
(use-package lsp-haskell
  :ensure t
  :config (setf lsp-haskell-server-path "haskell-language-server-wrapper"))
#+end_src

* Major Modes
** agda

#+begin_src emacs-lisp :tangle (config-require 'use-agda)
(load-file (let ((coding-system-for-read 'utf-8))
    (shell-command-to-string "agda-mode.exe locate")))

(require 'agda-input)
(add-hook 'text-mode-hook (lambda () (set-input-method "Agda")))
(add-hook 'org-mode-hook (lambda () (set-input-method "Agda")))
(agda-input-setup)

(add-hook 'agda2-mode-hook
  (lambda ()
    (interactive)
    (set-face-foreground 'agda2-highlight-datatype-face "dodger blue")
    (set-face-foreground 'agda2-highlight-primitive-type-face "dodger blue")
    (set-face-foreground 'agda2-highlight-primitive-face "dodger blue")
    (set-face-foreground 'agda2-highlight-function-face "dodger blue")
    (set-face-foreground 'agda2-highlight-postulate-face "dodger blue")))
#+end_src

** bash
** compilation

I often run ~latexmk -pdf -pvc~ in a compilation buffer, which recompiles
the latex-file whenever it is changed. This often results in annoyingly
large compilation buffers; the following snippet limits the buffer size in
accordance with ~comint-buffer-maximum-size~, which defaults to 1024 lines.

#+BEGIN_SRC emacs-lisp
(add-hook 'compilation-filter-hook 'comint-truncate-buffer)
#+END_SRC
** graphviz
#+begin_src emacs-lisp
(use-package graphviz-dot-mode
  :ensure t
  :config
   (setq graphviz-dot-indent-width 4))
#+end_src
** haskell

=haskell-doc-mode= is similar to =eldoc=, it displays documentation in
the echo area. Haskell has several indentation modes - I prefer using
=haskell-indent=.

#+BEGIN_SRC emacs-lisp :tangle (config-require 'use-haskell)
(use-package haskell-mode
  :ensure t)

(setq haskell-stylish-on-save t)
(setq haskell-mode-stylish-haskell-path "ormolu")
#+END_SRC
** dhall
#+begin_src emacs-lisp
(use-package dhall-mode
  :ensure t
  :config
   (setq
     dhall-format-arguments (\` ("--ascii"))
     dhall-use-header-line nil))
#+end_src
** html

#+begin_src emacs-lisp
(use-package web-mode
  :ensure t)

(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\.twig\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+end_src

** idris
#+BEGIN_SRC emacs-lisp :tangle (config-require 'use-idris)
(use-package idris-mode :ensure t)
(add-to-list 'exec-path idris-location)
#+END_SRC

** lisp

#+BEGIN_SRC emacs-lisp
(use-package elmacro
  :ensure t)
(use-package lispy
  :ensure t)
(use-package evil-lispy
  :ensure t)
#+END_SRC

I use =Paredit= when editing lisp code, we enable this for all lisp-modes.

#+BEGIN_SRC emacs-lisp
(dolist (mode '(ielm-mode
                lisp-mode
                emacs-lisp-mode
                lisp-interaction-mode
                scheme-mode))
  ;; add paredit-mode to all mode-hooks
  (add-hook (intern (concat (symbol-name mode) "-hook")) 'paredit-mode))
#+END_SRC

*** Emacs Lisp

In =emacs-lisp-mode= we can enable =eldoc-mode= to display information
about a function or a variable in the echo area.

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

This advice makes =eval-last-sexp= (bound to =C-x C-e=) replace the sexp with the value.

#+BEGIN_SRC emacs-lisp
(defadvice eval-last-sexp (around replace-sexp (arg) activate)
  "Replace sexp when called with a prefix argument."
  (if arg
      (let ((pos (point)))
        ad-do-it
        (goto-char pos)
        (backward-kill-sexp)
        (forward-sexp))
    ad-do-it))
#+END_SRC

** lua

#+begin_src emacs-lisp
(use-package lua-mode
  :ensure t)
#+end_src
** markdown

This makes =.md=-files open in =markdown-mode=.

#+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
#+END_SRC

I sometimes use a specialized markdown format, where inline math-blocks
can be achieved by surrounding a LaTeX formula with =$math$= and
=$/math$=. Writing these out became tedious, so I wrote a small function.

#+BEGIN_SRC emacs-lisp
   (defun insert-markdown-inline-math-block ()
     "Inserts an empty math-block if no region is active, otherwise wrap a
   math-block around the region."
     (interactive)
     (let* ((beg (region-beginning))
            (end (region-end))
            (body (if (region-active-p) (buffer-substring beg end) "")))
       (when (region-active-p)
         (delete-region beg end))
       (insert (concat "$math$ " body " $/math$"))
       (search-backward " $/math$")))
#+END_SRC

Most of my writing in this markup is in Norwegian, so the dictionary is
set accordingly. The markup is also sensitive to line breaks, so
=auto-fill-mode= is disabled. Of course we want to bind our lovely
function to a key!

#+BEGIN_SRC emacs-lisp
   (add-hook 'markdown-mode-hook
             (lambda ()
               (auto-fill-mode 0)
               (visual-line-mode 1)
               (local-set-key (kbd "C-c b") 'insert-markdown-inline-math-block)) t)
#+END_SRC
** org

Org itself installed earlier

#+BEGIN_SRC emacs-lisp

#+END_SRC

*** editing


Shortens url links in org mode

#+BEGIN_SRC emacs-lisp
#+END_SRC

Customizes the structure templates

#+BEGIN_SRC emacs-lisp
#+END_SRC

Prevents editing invisible text

#+begin_src emacs-lisp
#+end_src

This converts markdown style links into org-mode style links

#+begin_src emacs-lisp
#+end_src

This function helps with adding books to my index

#+begin_src emacs-lisp
#+end_src

*** evil org

#+BEGIN_SRC emacs-lisp
#+END_SRC
*** tags

For when a parent heading needs to be broken up into it's children.
Adds any inherited tags to the immediate children.
#+begin_src emacs-lisp

#+end_src

*** file associations

#+BEGIN_SRC emacs-lisp
#+END_SRC
*** agenda

#+begin_src emacs-lisp
#+end_src

Highlight the current line in agenda view

#+begin_src emacs-lisp
#+end_src

**** schedule

Don't delay for scheduled tasks

#+BEGIN_SRC emacs-lisp
#+END_SRC

Hide all tags on agenda view
#+BEGIN_SRC emacs-lisp
#+END_SRC

**** habits

#+BEGIN_SRC emacs-lisp
#+END_SRC

**** todo states

Edna is a package that adds extensible conditions and dependencies for todo states.

#+begin_src emacs-lisp
#+end_src

#+BEGIN_SRC emacs-lisp
#+END_SRC

Sets priority color faces

#+BEGIN_SRC emacs-lisp
#+END_SRC

#+BEGIN_SRC emacs-lisp
#+END_SRC

Auto detect what kind of todo item is being completed and call the right function

#+begin_src emacs-lisp
#+end_src

#+begin_src emacs-lisp
#+end_src

***** actions

Helpers

#+begin_src emacs-lisp
#+end_src

Usable actions

#+begin_src emacs-lisp
#+end_src

**** todo editing

These functions helps clear out done tasks in an org file

#+BEGIN_SRC emacs-lisp
#+END_SRC

Generates a sequence of todo items based on a sequence of numbers

#+BEGIN_SRC emacs-lisp
#+END_SRC

Helps sort sections

#+BEGIN_SRC emacs-lisp
#+END_SRC

Count only the subtasks directly beneath a header

#+begin_src emacs-lisp
#+end_src

Sets all immediate children of header to set deadline for sibling 1 day after completion
#+begin_src emacs-lisp
#+end_src

***** custom edna triggers

These org-edna functions change only the time on a schedule or deadline.

#+begin_src emacs-lisp
#+end_src

**** todo navigation

This function will help randomly select a todo in the current tree.

#+BEGIN_SRC emacs-lisp
#+END_SRC
**** stats

#+begin_src emacs-lisp
#+end_src
**** super

#+begin_src emacs-lisp
#+end_src

*** links

#+begin_src emacs-lisp
#+end_src

Prevent org mode from auto expanding relative paths.
- This is needed for Zettelkasten to be portable

#+begin_src emacs-lisp
#+end_src

*** source blocks

When editing org-files with source-blocks, we want the source blocks to
be themed as they would in their native mode.

#+BEGIN_SRC emacs-lisp
#+END_SRC

This is quite an ugly fix for allowing code markup for expressions like
="this string"=, because the quotation marks causes problems.

#+BEGIN_SRC emacs-lisp
#+END_SRC

Make blocks more distinct

#+begin_src emacs-lisp
#+end_src

*** pdf

Org mode does currently not support synctex (which enables you to jump from
a point in your TeX-file to the corresponding point in the pdf), and it
seems like a tricky problem]].

Calling this function from an org-buffer jumps to the corresponding section
in the exported pdf (given that the pdf-file exists), using pdf-tools.

#+BEGIN_SRC emacs-lisp
#+END_SRC

*** babel


This allows for the execution of literate sh files.

#+BEGIN_SRC emacs-lisp
#+END_SRC

*** export

Sometimes I want to use the same org file to export into different sources,
but not include all of the content. For example, if I'm exporting into a
presentation, I might not want to export all of the paragraphs. This is done
by adding advice to the various export commands to ignore certain tags.

#+BEGIN_SRC emacs-lisp
#+END_SRC


This function will render the given org file as html and then insert the result into the current buffer. This is useful for embedding the contents of other org files.

#+begin_src emacs-lisp
#+end_src
*** latex

=.tex=-files should be associated with =latex-mode= instead of
=tex-mode=.

#+BEGIN_SRC emacs-lisp
#+END_SRC

Use ~biblatex~ for bibliography.

#+BEGIN_SRC emacs-lisp
#+END_SRC

When exporting from org-mode to pdf via latex, use pdflatex and bibtex. Uses
an explicit bash command to allow for this to work on windows via the linux
subsystem.

#+BEGIN_SRC emacs-lisp
#+END_SRC
*** refile

Configures refile to file things two headers deep and use outline completion

So like =Project Backlog/Some Project/= it refile to this sub header

#+begin_src emacs-lisp
#+end_src
*** ref
#+BEGIN_SRC emacs-lisp
;; (require 'org-ref)
#+END_SRC
*** keybindings

#+BEGIN_SRC emacs-lisp
#+END_SRC
*** zettelkausten

A utility for adding tags to zettlekausten notes

#+begin_src emacs-lisp
#+end_src

List all tags for a given note

#+begin_src emacs-lisp
#+end_src

Add all tags currently listed in grep to the current note

#+begin_src emacs-lisp
#+end_src

List all notes which link to this one

#+begin_src emacs-lisp
#+end_src

Search the zettelkasten using grep

#+begin_src emacs-lisp
#+end_src

Create new Zettelkasten note

#+begin_src emacs-lisp
#+end_src

#+begin_src emacs-lisp
#+end_src

Functions for referencing notes

#+begin_src emacs-lisp
#+end_src

A function for easy html export to blog

#+begin_src emacs-lisp
#+end_src

A hydra for quickly calling zettlekausten functions

#+begin_src emacs-lisp
#+end_src

** purescript
#+BEGIN_SRC emacs-lisp :tangle (config-require 'use-purescript)
(use-package purescript-mode
  :ensure t)

(defun purescript-setup ()
  (turn-on-purescript-indentation))

(add-hook 'purescript-mode-hook #'purescript-setup)
#+END_SRC
** powershell
#+begin_src emacs-lisp
(use-package powershell-mode
  :ensure t
  :config
   (setq powershell-indent 2))
#+end_src
** prolog
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))
(setq prolog-indent-width 2)
#+end_src
** python
#+BEGIN_SRC emacs-lisp :tangle (config-require 'use-python)
(use-package elpy
  :ensure t)
(use-package py-autopep8
  :ensure t)

;; Highlight character at "fill-column" position.
(add-hook 'python-mode-hook
          (lambda () (interactive)
            (set-variable 'py-indent-offset 4)
            (set-variable 'indent-tabs-mode nil)))
#+END_SRC
** php

#+begin_src emacs-lisp :tangle (config-require 'use-php)
(use-package php-mode :ensure t)
#+end_src
** javascript
#+BEGIN_SRC emacs-lisp :tangle (config-require 'use-javascript)
(use-package js2-mode :ensure t)
#+END_SRC
** nix
#+BEGIN_SRC emacs-lisp :tangle (config-require 'use-nix)
(use-package nix-mode :ensure t)
#+END_SRC
** rust

#+BEGIN_SRC emacs-lisp :tangle (config-require 'use-rust)
(use-package rust-mode
  :ensure t)
(use-package racer
  :ensure t)
(use-package flycheck-rust
  :ensure t)
(use-package flycheck-rust
  :ensure t)
(use-package cargo
  :ensure t)

(require 'rust-mode)

(defun rust-mode-setup ()
  (cargo-minor-mode nil)
  (flycheck-mode))

(defun racer-mode-setup ()
  (eldoc-mode))

(add-hook 'rust-mode-hook #'rust-mode-setup)

(define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
(define-key rust-mode-map (kbd "C-?") #'racer-describe)
(setq company-tooltip-align-annotations t)

(setq rust-format-on-save t)
#+END_SRC

** z3

#+begin_src emacs-lisp :tangle (config-require 'use-z3)
(use-package z3-mode
  :ensure t)
#+end_src

* Finalize Settings

Lastly we need to activate the map by creating and activating the
=minor-mode=.

#+BEGIN_SRC emacs-lisp
(define-minor-mode custom-bindings-mode
  "A mode that activates custom-bindings."
  t nil custom-bindings-map)
#+END_SRC

Report some startup stats

#+begin_src emacs-lisp
(message "*** Emacs loaded in %s with %d garbage collections."
     (format "%.2f seconds"
             (float-time
              (time-subtract after-init-time before-init-time))) gcs-done)

#+end_src

The GC threshold was increased in =early-init.el= so it is restored here

#+begin_src emacs-lisp
(setq gc-cons-threshold 800000)
#+end_src
